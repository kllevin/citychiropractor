/* ============================================================================
   @MASTER STYLESHEET
   ========================================================================= */
/**
 * Scally, being an OO framework, works in keeping with the open/closed
 * principle. Any custom styles *SHOULD NOT* be added or modified in Scally
 * directly. This also allows the framework to be updated seamlessly.
 *
 * Contents:
 *
 * Your settings.........your project-specific settings.
 * Scally framework......the entire Scally framework including your overrides.
 * Your styles...........all your project-specific styles.
 *
 * N.B. the above order and the order within the Scally framework section must
 * always be followed.
 */
/* Your settings
   ========================================================================= */
/**
 * Your project-specific settings.
 *
 * N.B. define first so they can be used throughout your styles.
 */
/* Scally framework
   ========================================================================= */
/**
 * By default everything is imported. But if you want to be selective and you
 * definitely should, so your CSS is as lean as possible, then only import what
 * you want. The Core section is however mandatory.
 *
 * Any settings you find set in Scally that you do not wish to keep, simply
 * redefine above/below the relevant `@import`. This means that if Scally, for
 * example, sets your `$font-size` at `16px` and you wish it to be `14px`,
 * simply redeclare it above the relevant `@import`, like so:
 *
   $font-size: 14;
   @import "bower_components/scally/core/settings/typography";
 *
 * If you want to use a Scally setting to override something then you need to
 * define the override below the `@import`, like so:
 *
   @import "bower_components/scally/core/settings/colours";
   $colour-text-base: $colour-brand;
 *
 * If you try to redeclare above the `@import` your Sass won't compile as you
 * don't have access to the Scally setting at the point of compilation.
 *
 * All non-Core settings need to be overridden above the `@import`, like so:
 *
   $u-arrow-size-base: 14;
   $u-arrow-colour: orange;
   @import "bower_components/scally/utilities/u-arrow";
 *
 * Scally ignores its own settings in favour of using your own, so you can
 * completely modify how Scally works without ever having to alter the
 * framework itself.
 *
 * N.B. the order specified below must always be followed or Scally will
 * break and if you're not using Bower or you customise where Bower installs
 * then you'll need to update the `@import` paths accordingly.
 *
 * Contents:
 *
 * CORE
 * LAYOUT
 * COMPONENTS
 * UTILITIES
 */
/**
 * CORE.
 *
 * N.B. this is all mandatory for the Scally framework.
 */
/* ============================================================================
   @CORE -> SETTINGS -> TYPOGRAPHY
   ========================================================================= */
/**
 * Size.
 */
/**
 * Line height.
 */
/**
 * Line height ratio.
 */
/**
 * Families.
 */
/* ============================================================================
   @CORE -> SETTINGS -> SPACING
   ========================================================================= */
/**
 * Base.
 */
/**
 * Decrease from base.
 */
/**
 * Increase from base.
 */
/* ============================================================================
   @CORE -> SETTINGS -> TOGGLES
   ========================================================================= */
/**
 * Switch things on or off for everything in Core, all other toggles are
 * handled at the partial level.
 */
/**
 * Debug.
 */
/**
 * Reset the `box-sizing` property to the more friendly `border-box` value.
 *
 * N.B. It's our recommendation to keep this turned on :).
 */
/**
 * Heading margins.
 */
/**
 * Responsive images.
 */
/**
 * Forms.
 */
/**
 * Apply device width viewport.
 */
/* ============================================================================
   @CORE -> SETTINGS -> BREAKPOINTS
   ========================================================================= */
/**
 * Here we set breakpoints. Not every media query will be able to use one of
 * these breakpoints and that's fine as they're no magic numbers with
 * breakpoints i.e. if the UI needs to change then it needs to change. But
 * most of the time we can use them.
 *
 * The breakdown of the breakpoints is based off this chart:
 * http://static.lukew.com/unified_device_design.png
 *
 * Here's the thinking:
 *
 * - Palm: smartphones and featurephones i.e. anything that can fit into the
 *   palm of a hand.
 * - Lap: typically tablets, notebooks and laptops i.e. anything that is
 *   portable that doesn't include phones.
 * - Lap small: smaller tablets/notebooks and e-readers e.g. Kindle.
 * - Lap large: larger tablets and laptops.
 * - Desk: desktop computers, TV's, etc. i.e. anything that is not portable.
 * - Desk small: smaller desktop computer monitors.
 * - Desk large: larger desktop computer monitors, TV's, and who knows what
 *   else?
 *
 * The breakpoints:
 *
 * - Palm:         0 - 640px
 *
 * - Lap:          641px +
 * - Lap large:    901px +
 *
 * - Desk:         1200px +
 * - Desk large:   1366px +
 *
 * @demo
 * http://codepen.io/team/westfieldlabs/full/aLDdb
 *
 * @credit
 * - http://www.lukew.com/ff/entry.asp?1679
 * - https://developers.google.com/webmasters/smartphone-sites/details?hl=en
 */
/**
 * Define the breakpoints that we want certain modules e.g. utilities and
 * layout to use applied via the `generate-at-breakpoints` mixin found in
 * Core -> Mixins. By default we set it to Lap but this can be overriden at
 * the individual partial level.
 */
/* ============================================================================
   @CORE -> SETTINGS -> WIDTHS
   ========================================================================= */
/**
 * All the flexible widths.
 */
/**
 * Whole.
 */
/**
 * Half.
 */
/**
 * Thirds.
 */
/**
 * Quarters.
 */
/**
 * Fifths.
 */
/**
 * Sixths.
 */
/**
 * Sevenths.
 */
/**
 * Eigths.
 */
/**
 * Tenths.
 */
/**
 * Twelfhs.
 */
/* ============================================================================
   @CORE -> SETTINGS -> COLOURS
   ========================================================================= */
/**
 * Brand.
 */
/**
 * Black.
 */
/**
 * White.
 */
/**
 * Text.
 */
/**
 * Primary / Secondary.
 */
/**
 * States.
 */
/* ============================================================================
   @CORE -> SETTINGS -> POSITIONING
   ========================================================================= */
/**
 * `z-index` values.
 *
 * A nice way to maintain `z-index` order. Be sure to read this: http://www.smashingmagazine.com/2014/06/12/sassy-z-index-management-for-complex-layouts/
 *
 * Scally kicks it off by providing a stacking order context at the lowest
 * level i.e. for the containers that make up the main sections of a web site
 * which is usually something like this:
 *
   <body>
     <header>
     <main>
     <footer>
   </body>
 *
 * So we can set up the above like so:
 *
 * $z-index-elements-global:  footer,           // `z-index: 1`
                              main,             // `z-index: 2`
                              header !default;  // `z-index: 3`
 *
 * Then within each of these main sections e.g. `header` you may end up with
 * more stacking contexts e.g.
 *
   $z-index-elements-header:  navigation, // `z-index: 1`
                              drop-downs; // `z-index: 2`
 *
 * So the stacking order of the above would be:
 *
 * header (3)
 *  navigation (1)
 *  drop-downs (2)
 * main (2)
 * footer (1)
 *
 * @credit
 * http://www.smashingmagazine.com/2014/06/12/sassy-z-index-management-for-complex-layouts/
 */
/**
 * Off-screen distance.
 */
/* ============================================================================
   @CORE -> SETTINGS -> COSMETICS
   ========================================================================= */
/**
 * Disabled state opacity strength.
 */
/**
 * Border radius.
 */
/* ============================================================================
   @CORE -> FUNCTIONS -> CONVERT PX TO EM/REM
   ========================================================================= */
/**
 * To convert `px` to `em`s or `rem`s.
 *
 * @credit
 * https://gist.github.com/2237465
 *
 * @example
   .foo {margin-left: to-em(8, 20);}
   .foo {padding: to-rem(8) 0;}
 *
 */
/**
 * `em`.
 */
/**
 * `rem`.
 */
/* ============================================================================
   @CORE -> FUNCTIONS -> MATH HELPERS
   ========================================================================= */
/**
 * A few maths helpers mainly used for halving and doubling numbers, returning
 * rounded integers.
 *
 * @example
   .foo {padding: halve(3.2px);}
 */
/**
 * Quarter.
 */
/**
 * Third.
 */
/**
 * Halve.
 */
/**
 * Double.
 */
/**
 * Triple.
 */
/**
 * Quadruple.
 */
/* ============================================================================
   @CORE -> FUNCTIONS -> STRING REPLACE
   ========================================================================= */
/**
 * A string helper which replaces a set of characters in a string.
 *
 * @credit
 * https://github.com/hail2u/scss-functions/blob/master/string/_str-replace.scss
 *
 * @example
   str-replace("my-long-string", "long", "longer");
 */
/* ============================================================================
   @CORE -> MIXINS -> CONVERT PX TO EM/REM
   ========================================================================= */
/**
 * Convert `px` to `em`'s or `rem`'s for multiple properties or values or
 * both. Accepts a list of lists (instead a list of values) for properties
 * that accept multiple lists of values. Only numbers are converted;
 * everything else is passed through. For the `to-em` `@mixin` `$context` is
 * an optional argument that allows making measurements relative to the parent
 * font size rather than the current.
 *
 * @example
   @include to-em(line-height, 30);
   @include to-rem(line-height, 30);
   @include to-em(width height, 125);
   @include to-rem(padding, 0 25);
   @include to-em(text-shadow, (#0d6e28 1 1) (#777 0 0 2), 16);
   @include to-rem(box-shadow, (inset 0 0 0 1 #2a9022) (inset 0 0 3 #459966));
   @include to-em(padding margin, $spacing-base, $sledgehammer: !important);
   @include to-rem(margin, $spacing-base, !important);
 *
 * @demo
 * http://codepen.io/team/westfieldlabs/full/Bcfyz/#convert-px-to-rem
 *
 * @credit
 * https://gist.github.com/2237465
 */
/**
 * `em`.
 */
/**
 * `rem`.
 */
/* ============================================================================
   @CORE -> MIXINS -> FONT SIZE
   ========================================================================= */
/**
 * Create a fully formed type style (sizing and vertical rhythm) by passing in
 * a single value, e.g.:
 *
   .foo {@include font-size(12);}
 *
 * This will generate a rem-based font-size, as well as a unitless line-height
 * which will place the element on your baseline, e.g.:
 *
   .foo {
     font-size: 0.75rem;
     line-height: 2;
   }
 *
 * If you do not want Scally to generate you a line-height automatically, you
 * simply pass in your own as a second paramater:
 *
   .foo {@include font-size(12, 1.5);}
 *
 * This will yield:
 *
   .foo {
     font-size: 0.75rem;
     line-height: 1.5;
   }
 *
 * This parameter can be any integer, `inherit`, or `normal`. If you don't
 * want a line-height at all, pass in a second paramater of `none` or `false`:
 *
   .foo {@include font-size(12, none);}
 *
 * This will yield:
 *
   .foo {font-size: 0.75rem;}
 *
 * @example
   @include font-size(18);
   @include font-size(12, 1.5);
   @include font-size(12, none);
   @include font-size(24, inherit);
   @include font-size(24, normal);
 *
 * @demo
 * http://codepen.io/team/westfieldlabs/full/Bcfyz#font-size
 *
 * @credit
 * https://github.com/inuitcss/tools.mixins/blob/master/_tools.mixins.scss
 */
/* ============================================================================
   @CORE -> MIXINS -> GRADIENTS
   ========================================================================= */
/**
 * Some simple gradients.
 *
 * @demo
 * http://codepen.io/team/westfieldlabs/full/Bcfyz#gradients
 */
/**
 * Linear gradient accepting two colours, directional keywords (default
 * direction is `bottom`), and an optional IE 9 fallback.
 *
 * @example
   @include linear-gradient(blue, red);
   @include linear-gradient(blue, red, left);
   @include linear-gradient(blue, red, top left);
   @include linear-gradient(blue, red, top right);
   @include linear-gradient(blue, red, bottom left);
   @include linear-gradient(blue, red, bottom right);
   @include linear-gradient(blue, red, top, true);
 */
/**
 * Radial gradient accepting two colours.
 *
 * @example
   @include radial-gradient(blue, red);
 */
/* ============================================================================
   @CORE -> MIXINS -> MEDIA QUERIES
   ========================================================================= */
/**
 * Setup media queries for minimum and maximum widths/heights, with width
 * being the default, also includes the ability to apply ranges.
 *
 * @demo
 * http://codepen.io/team/westfieldlabs/full/Bcfyz#media-queries
 *
 * @example
   @include respond-to(lap) {
     .foo {background: red;}
   }

   @include respond-to(500) {
     .foo {background: red;}
   }

   @include respond-to(palm, max) {
     .foo {background: red;}
   }

   @include respond-to(500, $axis: height) {
     .foo {background: red;}
   }

   @include respond-range(500, 780) {
     .foo {background: red;}
   }

   @include respond-range(lap) {
     .foo {background: red;}
   }
 */
/**
 * Simple minimum and maximum width/height values.
 */
/**
 * Ranges.
 */
/* ============================================================================
   @CORE -> MIXINS -> GENERATE AT BREAKPOINTS
   ========================================================================= */
/**
 * Generate classes which apply styling at different breakpoints which is fed
 * from the breakpoints defined here: Core -> Settings -> Breakpoints or any
 * custom breakpoint. The format of the generated class with a `min-width`
 * (default) media query is:
 *
   .[class-selector]-from-[breakpoint]
 *
 * E.g.
 *
   .u-list-inline-from-lap
 *
 * The format of the generated class with a `max-width` (apply via the `max`
 * flag) media query is:
 *
   .[class-selector]-up-to-[breakpoint]
 *
 * E.g.
 *
   .u-list-inline-up-to-lap
 *
 * Sometimes the selector that is passed into this mixin is more complex than a
 * single class. In these cases the `-from-lap` or `-up-to-` suffix usually
 * should not be appended to the end of the selector. To account for this,
 * put `{bp}` in the selector where `-from-lap` or `-up-to-` should be
 * inserted.
 *
 * E.g.
 *
 * `.u-demo{bp} li` will produce the selector `.u-demo-from-lap li`.
 *
 * @demo
 * http://codepen.io/team/westfieldlabs/full/Bcfyz
 *
 * @example
   @include generate-at-breakpoints('.u-text-size-small', all) {
     @include font-size($font-size-small);
   }

   @include generate-at-breakpoints('.u-demo{bp} li', palm lap) {
     vertical-align: top;
   }

   @include generate-at-breakpoints('.u-position-fixed', (400 max, 401 min,
    desk max)) {
     position: fixed;
   }

   @include generate-at-breakpoints('.u-position-fixed', 400 max) {
     position: fixed;
   }
 */
/**
 * Settings.
 */
/* ============================================================================
   @CORE -> MIXINS -> GENERATE PERCENTAGE CLASSES AT BREAKPOINTS
   ========================================================================= */
/**
 * Generate percentage classes with the option to apply at different
 * breakpoints e.g. `.u-one-whole` / `.u-one-whole-from-lap`. The percentage
 * classes are based off the widths defined here: Core -> Settings -> Widths.
 *
 * N.B. the application for this mixin is quite unique so it's only used in a
 * few places in the framework.
 *
 * @example
   @include generate-percentage-classes-at-breakpoints(
     $breakpoints-for-grid-push-classes,
     $scally-type: "l",
     $class-name: "push",
     $css-property: "left"
   );
 */
/**
 * Settings.
 */
/* ============================================================================
   @CORE -> MIXINS -> RETINA BACKGROUND IMAGE
   ========================================================================= */
/**
 * Creates a retina background image.
 *
 * @example
   .foo {
      background: url("logo.png") no-repeat;
      @include retina-bg-image("logo@2x.png", 100px, 25px);
    }
  *
  * @demo
  * http://codepen.io/team/westfieldlabs/full/Bcfyz#retina-bg-image
  *
  * @credit
  * http://37signals.com/svn/posts/3271-easy-retina-ready-images-using-scss
 */
/* ============================================================================
   @CORE -> MIXINS -> TARGET BROWSERS
   ========================================================================= */
/**
 * Target specific browsers.
 *
 * N.B. these mixins should be avoided as it's not good to target styles for
 * different browsers. And the Mozilla mixin cannot be nested in a style
 * declaration like the others, it has to exist by itself.
 *
 * @example
   @include target-webkit {
     .foo {background: blue;}
   }

   @include target-mozilla {
     .foo {background: red;}
   }

   @include target-IE10-and-up {
     .foo {background: orange;}
   }
  *
  * @demo
  * http://codepen.io/team/westfieldlabs/full/Bcfyz#target-browsers
 */
/**
 * Webkit.
 */
/**
 * Mozilla.
 */
/**
 * IE 10 and up.
 */
/* ============================================================================
   @CORE -> MIXINS -> TARGET HEADINGS
   ========================================================================= */
/**
 * Style any number of headings in one fell swoop, supports double stranded
 * headings.
 *
 * @example
   .foo {
     @include headings(1, 3) {
       color: red;
     }
    }
 *
 * @demo
 * http://codepen.io/team/westfieldlabs/full/Bcfyz#target-headings
 *
 * @credit
 * https://github.com/csswizardry/inuit.css/blob/master/generic/_mixins.scss
 */
/*! normalize.css v3.0.2 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

/* ============================================================================
   @CORE -> RESET
   ========================================================================= */
/**
 * In addition to normalize.css we also apply a reset which mainly removes all
 * margins, paddings, and borders, from all elements, and applies the nice
 * `border-box` value for `box-sizing`. And a few other things.
 *
 * @demo
 * http://codepen.io/team/westfieldlabs/full/wGvdp
 */
/**
 * Remove all margins, paddings, and borders.
 *
 * N.B. the complete list of HTML5 elements
 * https://developer.mozilla.org/en/docs/Web/Guide/HTML/HTML5/HTML5_element_list
 */
html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strong,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
sub,
sup,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
time,
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
nav,
section,
summary,
main,
menu {
  margin: 0;
  padding: 0;
  border: 0; }

/**
 * Reset the `box-sizing` property to the more friendly `border-box` value.
 *
 * @credit
 * http://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/
 */
html {
  box-sizing: border-box; }

*, *:before, *:after {
  box-sizing: inherit; }

/**
 * Reset lists.
 */
ul,
ol {
  list-style-type: none; }

/**
 * Suppress the focus outline on links that cannot be accessed via a keyboard.
 * This prevents an unwanted focus outline from appearing around elements that
 * might still respond to pointer events.
 *
 * N.B. it is okay to use `!important` here as we're doing it preemptively
 * i.e. you know you willalways want the rule it's applied too to take
 * precedence.
 *
 * @credit
 * https://github.com/suitcss/
 */
[tabindex="-1"]:focus {
  outline: none !important; }

/**
 * Remove underlines from potentially troublesome elements.
 */
u,
ins {
  text-decoration: none; }

/**
 * Apply faux underlines to inserted text via `border-bottom`.
 */
ins {
  border-bottom: 0.04762rem solid; }

/* ============================================================================
   @CORE -> @DEBUG
   ========================================================================= */
/**
 * Enable this stylesheet to visually detect any improperly nested or
 * potentially invalid markup, or any potentially inaccessible code.
 *
 * N.B.
 * - red    = definite error.
 * - yellow = double-check.
 * - none   = should be fine.
 *
 * @credit
 * https://github.com/csswizardry/inuit.css/blob/master/inuit.css/generic/_debug.scss
 *
 * @demo
 * http://codepen.io/team/westfieldlabs/full/GHzvE
 */
/* ============================================================================
   @CORE -> BASE -> ROOT
   ========================================================================= */
/**
 * The root element: `html`.
 *
 * 1. Set the default `font-size`, `line-height` and `font-family` for the
 *    entire project, sourced from the Scally settings. The `font-size` is
 *    calculated to exist in `em`s, the `line-height` is calculated to exist
 *    unitlessly.
 * 2. Fonts on OSX will look more consistent with other systems that do not
 *    render text using sub-pixel anti-aliasing.
 */
/**
 * Settings.
 */
html {
  font: 1.3125em/1.61905 "Gentium Basic", serif;
  color: #2f363b;
  background: #fff;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased; }

/* ============================================================================
   @CORE -> BASE -> ABBREVIATION
   ========================================================================= */
/**
 * @demo
 * http://codepen.io/team/westfieldlabs/full/zIgBs/
 */
abbr[title] {
  cursor: help; }

/* ============================================================================
   @CORE -> BASE -> FORMS
   ========================================================================= */
/**
 * @demo
 * http://codepen.io/team/westfieldlabs/full/zIgBs/#forms
 */
/**
 * Settings.
 */
/**
 * Text inputs and `select`s
 */
/**
 * Indicate that `label` will shift focus to the associated `input` element.
 */
label,
.faux-label {
  cursor: pointer; }

/**
 * Disable `textarea`s from being resized horizontally.
 */
textarea {
  resize: vertical; }

/**
 * Override `content-box` from normalize.css for search inputs.
 */
input[type="search"] {
  box-sizing: border-box; }

/**
 * Remove rounded corners from iOS search inputs by overriding
 * `appearance: textfield` from normalize.css.
 * See: https://github.com/necolas/normalize.css/issues/360.
 */
input[type="search"] {
  appearance: none; }

/**
 * Remove rounded corners that iOS applies to all `input` buttons.
 * See: https://github.com/necolas/normalize.css/issues/178
 */
input[type="submit"],
input[type="button"],
input[type="image"],
input[type="reset"] {
  border-radius: 0; }

/**
 * Fix for IE and old versions of some other browsers not wrapping text within
 * a `legend`.
 *
 * 1. Enable line-wrapping in IE8+.
 * 2. Enable line-wrapping in old versions of some other browsers.
 *
 * @credit
 * http://www.456bereastreet.com/archive/201210/
 * how_to_line_wrap_text_in_legend_elements_even_in_ie/
 */
legend {
  display: table;
  white-space: normal; }

/**
 * Set whitespace for `legend`s via a class, we use `padding` over `margin` as
 * `padding` is the most cross-browser compatible for `legend`s.
 */
.form-heading {
  padding-bottom: 1.61905rem; }

/**
 * Disabled state.
 *
 * N.B. it is okay to use `!important` here as we're doing it preemptively
 * i.e. you know you will always want the rule it's applied too to take
 * precedence.
 */
button[disabled],
input[disabled],
select[disabled],
textarea[disabled],
.is-disabled {
  cursor: not-allowed !important;
  text-shadow: none !important;
  box-shadow: none !important;
  opacity: 0.6 !important; }

.is-disabled--no-hover {
  cursor: inherit !important;
  color: inherit !important;
  background: inherit !important;
  text-decoration: none !important; }

/**
 * Required field indicator (asterisk).
 */
.required-field {
  color: #dc322f;
  cursor: help; }

/**
 * Text inputs via the `.text-input` class, `textarea`s, and `select` lists.
 */
.text-input,
textarea,
select {
  padding: 0.40476rem;
  color: #2f363b;
  background: #fff;
  border: 0.04762rem solid #4d4d4d; }

/**
 * Remove the top inner shadow from iOS inputs.
 *
 * N.B. this needs to be isolated to iOS devices so user-agent sniffing needs
 * to happen and the most robust implementation of this is to apply the hook
 * to the `html` element e.g. `.ios`.
 */
/**
 * Hide the close button generated by IE 10+ for inputs.
 */
/* ============================================================================
   @CORE -> BASE -> DETAILS
   ========================================================================= */
/**
 * @demo
 * http://codepen.io/team/westfieldlabs/full/zIgBs/
 */
/**
 * Settings.
 */
summary {
  cursor: pointer;
  /**
   * Control the visibility of the `detail`s marker.
   */ }

/* ============================================================================
   @CORE -> BASE -> HEADINGS
   ========================================================================= */
/**
 * Double stranded for greater reuse.
 *
 * @demo
 * http://codepen.io/team/westfieldlabs/full/zIgBs#headings
 */
/**
 * Apply font family.
 */
h1, .h1, h2, .h2, h3, .h3, h4, .h4, h5, .h5, h6, .h6 {
  font-family: "Open Sans", sans-serif; }

/**
 * Set margins but make optional.
 */
/**
 * H1.
 */
h1,
.h1 {
  font-size: 1.71429rem;
  line-height: 1.88889;
  margin-top: 0; }

/**
 * H2.
 */
h2,
.h2 {
  font-size: 1.42857rem;
  line-height: 1.13333; }

/**
 * H3.
 */
h3,
.h3 {
  font-size: 1.14286rem;
  line-height: 1.41667; }

/**
 * H4.
 */
h4,
.h4 {
  font-size: 0.95238rem;
  line-height: 1.7; }

/**
 * H5.
 */
h5,
.h5 {
  font-size: 0.7619rem;
  line-height: 2.125; }

/**
 * H6.
 */
h6,
.h6 {
  font-size: 0.66667rem;
  line-height: 2.42857; }

/* ============================================================================
   @CORE -> BASE -> HORIZONTAL RULE
   ========================================================================= */
/**
 * @demo
 * http://codepen.io/team/westfieldlabs/full/zIgBs/
 */
/**
 * Settings.
 */
hr {
  display: block;
  border: 0;
  border: 0.04762rem solid #2f363b;
  padding: 0; }

/* ============================================================================
   @CORE -> BASE -> LINKS
   ========================================================================= */
/**
 * @demo
 * http://codepen.io/team/westfieldlabs/full/zIgBs/
 */
/**
 * Settings.
 */
a {
  color: #008CD6;
  text-decoration: none; }
  a:hover, a:focus {
    color: #006ba3;
    text-decoration: underline; }

/* ============================================================================
   @CORE -> BASE -> MEDIA
   ========================================================================= */
/**
 * @demo
 * http://codepen.io/team/westfieldlabs/full/zIgBs#images
 */
/**
 * Settings.
 */
/**
 * Remove the gap between media elements and the bottom of their containers.
 *
 * @credit
 * http://html5boilerplate.com/
 */
audio,
canvas,
img,
svg,
video {
  vertical-align: middle; }

/**
 * Images.
 *
 * 1. Make responsive.
 * 2. So that `alt` text is visually offset if images don't load.
 */
img {
  max-width: 100%;
  height: auto;
  /**
   * Google Maps breaks if `max-width: 100%` acts upon it; use their
   * selector to remove the effects.
   */
  font-style: italic; }
  .gm-style img {
    max-width: none; }

/**
 * If responsive images are turned on then use this to turn it off.
 */
.img-not-responsive {
  max-width: none; }

/**
 * Set the default behavior for touch-based browsing in IE 10 on devices
 * running Windows 8.
 */
canvas {
  -ms-touch-action: double-tap-zoom; }

/* ============================================================================
   @CORE -> BASE -> PARAGRAPHS
   ========================================================================= */
/**
 * @demo
 * http://codepen.io/team/westfieldlabs/full/zIgBs#paragraphs
 */
/* ============================================================================
   @CORE -> BASE -> PRINT
   ========================================================================= */
/**
 * All print styles outside of Core -> Base live in context with their
 * corresponding rule sets.
 *
 * N.B. it is okay to use `!important` here as we're doing it preemptively i.e.
 * you know you will always want the rule it's applied too to take precedence.
 *
 * @credit
 * http://html5boilerplate.com/
*/
@media print {
  /**
   * Apply print friendly styles to ALL elements.
   */
  * {
    background: transparent !important;
    color: #000 !important;
    box-shadow: none !important;
    text-shadow: none !important; }

  /**
   * Hide elements not really useful on a piece of paper.
   */
  nav,
  video,
  audio {
    display: none !important; }

  /**
   * Ensure ALL images are responsive.
   */
  img {
    max-width: 100% !important; }

  /**
   * Make links always stand out.
   */
  a, a:visited {
    text-decoration: underline !important; }

  /**
   * Show the `href` and `title` attribute values of links and abbreviations
   * in a pseudo element.
   */
  a[href]:after {
    content: " (" attr(href) ")"; }

  abbr[title]:after {
    content: " (" attr(title) ")"; }

  a[href^="javascript:"]:after,
  a[href^="#"]:after {
    content: ""; }

  /**
   * h5bp.com/t
   */
  thead {
    display: table-header-group; }

  /**
   * Set page breaks, orphans and widows.
   */
  h2
  h3 {
    page-break-after: avoid; }

  tr,
  img,
  pre,
  blockquote {
    page-break-inside: avoid; }

  p,
  h2,
  h3 {
    orphans: 3;
    widows: 3; } }
/* ============================================================================
   @CORE -> BASE -> VIEWPORT
   ========================================================================= */
/**
 * Add optional `@viewport` rule to future proof.
 *
 * N.B. leave out `-ms-` prefix, see here:
 * http://nostrongbeliefs.com/why-i-think-we-shouldnt-use-css-viewport-in-ie10-for-now/
 */
@-webkit-viewport {
  width: device-width; }
@-moz-viewport {
  width: device-width; }
@-o-viewport {
  width: device-width; }
@viewport {
  width: device-width; }
/* ============================================================================
   @CORE -> PLACEHOLDERS -> BOTTOM SPACING
   ========================================================================= */
/**
 * Applies bottom spacing in order to try to keep a consistent vertical rhythm.
 */
/**
 * Base.
 */
h1, .h1, h2, .h2, h3, .h3, hr, p {
  margin-bottom: 1.61905rem; }

/**
 * Half.
 */
h4, .h4, h5, .h5, h6, .h6 {
  margin-bottom: 0.80952rem; }

h1:last-child, .h1:last-child, h2:last-child, .h2:last-child, h3:last-child, .h3:last-child, hr:last-child, p:last-child,
h4:last-child,
.h4:last-child,
h5:last-child,
.h5:last-child,
h6:last-child,
.h6:last-child {
  margin-bottom: 0; }

/**
 * LAYOUT.
 */
/* ============================================================================
   @LAYOUT -> CONTAINER
   ========================================================================= */
/**
 * The main container that wraps all major layout pieces so that we keep all
 * layout consistent. The container is responsive in that it will be a fluid
 * width using '%' up until it hits it's maximum width. And it's center
 * aligned by default.
 *
 * @demo
 * http://codepen.io/team/westfieldlabs/full/GiCzg/
 */
/**
 * Settings.
 */
/**
 * Apply at breakpoints.
 */
.l-container {
  width: 92%;
  min-width: 10.47619rem;
  max-width: 76.19048rem;
  margin: 0 auto; }
  @media print {
    .l-container {
      width: auto; } }

@media (min-width: 40.0625em) {
  .l-container-from-lap {
    width: 92%;
    min-width: 10.47619rem;
    max-width: 76.19048rem;
    margin: 0 auto; } }
  @media print and (min-width: 40.0625em) {
    .l-container-from-lap {
      width: auto; } }

/**
 * Modifier: full bleed.
 */
.l-container--full-bleed {
  width: auto;
  max-width: none; }

/**
 * Modifier: not centered.
 */
.l-container--not-centered {
  margin-left: 0;
  margin-right: 0; }

/* ============================================================================
   @LAYOUT -> GRID
   ========================================================================= */
/**
 * A powerful fluid and nestable mobile first grid system.
 *
 * Combine with the viewport specific width classes found in Utilities ->
 * Widths to apply grid widths at specific viewports, for example:
 *
   <div class="l-grid__item u-one-half-from-lap u-one-third-from-desk">
 *
 * This would give you a grid item which is 100% width unless it is on a lap
 * device, at which point it becomes 50% wide, or it is on a desktop device,
 * at which point it becomes 33.333% width. See breakpoints set here: Core ->
 * Settings -> Breakpoints.
 *
 * N.B. grid systems should be thought of as shelves. They contain content but
 * are not content in themselves. You put up your shelves then fill them with
 * your stuff. By setting up our grids separately to our components you can
 * move components around a lot more easily than if they had dimensions
 * applied to them; this makes our front-ends a lot more adaptable and quick
 * to work with.
 *
 * N.B. you should never apply any styles to a grid item, they are for layout
 * purposes only. Apply styling to content inside a grid item.
 *
 * @demo
 * http://codepen.io/team/westfieldlabs/full/cjyHK/
 *
 * @credit
 * https://github.com/csswizardry/csswizardry-grids/blob/master/csswizardry-grids.scss
 */
/**
 * Settings.
 */
/**
 * Apply at breakpoints.
 */
/**
 * Grid container.
 *
 * 1. Negative `margin-left` to negate the columns gutters.
 * 2. So it can work on inline elements e.g. `span`.
 */
.l-grid {
  margin-left: -1.61905rem;
  display: block; }
  .l-grid:after {
    content: "";
    display: table;
    clear: both; }

/**
 * 1. Cause columns to stack side-by-side.
 * 2. Space columns apart.
 * 3. Full-width unless told to behave otherwise.
 * 4. Required to combine fluid widths and fixed gutters.
 */
.l-grid__item {
  float: left;
  padding-left: 1.61905rem;
  width: 100%; }

/**
 * Modifier: gutterless.
 */
.l-grid--gutterless {
  margin-left: 0; }
  .l-grid--gutterless > .l-grid__item {
    padding-left: 0; }

/**
 * Modifier: gutter tiny.
 */
.l-grid--gutter-tiny {
  margin-left: -0.53968rem; }
  .l-grid--gutter-tiny > .l-grid__item {
    padding-left: 0.53968rem; }

/**
 * Modifier: gutter small.
 */
.l-grid--gutter-small {
  margin-left: -0.80952rem; }
  .l-grid--gutter-small > .l-grid__item {
    padding-left: 0.80952rem; }

/**
 * Modifier: gutter large.
 */
.l-grid--gutter-large {
  margin-left: -2.42857rem; }
  .l-grid--gutter-large > .l-grid__item {
    padding-left: 2.42857rem; }

/**
 * Modifier: gutter huge.
 */
.l-grid--gutter-huge {
  margin-left: -3.2381rem; }
  .l-grid--gutter-huge > .l-grid__item {
    padding-left: 3.2381rem; }

/**
 * Modifier: reversed.
 *
 * Reversed rendered order of layout items, e.g. items 1, 2, 3, 4 in your
 * markup will display in order 4, 3, 2, 1 on your page.
 */
.l-grid--reversed > .l-grid__item {
  float: right; }

/**
 * Modifier: table display with options to set different vertical alignments.
 */
.l-grid--table {
  display: table; }
  .l-grid--table > .l-grid__item {
    display: table-cell;
    float: none; }

.l-grid--table--v-align-middle > .l-grid__item {
  vertical-align: middle; }

.l-grid--table--v-align-bottom > .l-grid__item {
  vertical-align: bottom; }

/**
 * COMPONENTS.
 */
/* ============================================================================
   @COMPONENTS -> BUTTON
   ========================================================================= */
/**
 * Button component with a bunch of modifiers.
 *
 * @demo
 * http://codepen.io/team/westfieldlabs/full/Fvxju#button
 */
/**
 * Settings.
 */
/**
 * Base styles most buttons will need.
 *
 * 1. Prevent button text from being selectable.
 * 2. Make sure `input` will wrap text across multiple lines.
 * 3. Allow us to style box model properties.
 * 4. Line different sized buttons up a little nicer.
 * 5. Correct font family not being inherited in all browsers.
 * 6. Correct font size not being inherited in all browsers.
 * 7. Address Firefox 4+ setting `line-height` on `input` using `!important` in
 *    the UA stylesheet.
 * 8. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 * 9. Reset/normalize styles from the UA stylesheet.
 */
.btn {
  user-select: none;
  white-space: normal;
  display: inline-block;
  vertical-align: middle;
  font-family: inherit;
  font-size: 100%;
  line-height: normal;
  cursor: pointer;
  border: 0;
  padding: 0;
  margin: 0;
  background: transparent; }
  .btn,
  .btn:hover,
  .btn:focus,
  .btn:active {
    text-decoration: none; }

/**
 * Main.
 *
 * In addition to the base styles above here we apply the main button styles
 * for your project.
 *
 * N.B. we keep the base and main styles separate so that any button can
 * access the base styles.
 */
.btn-main {
  text-align: center;
  background-color: #008CD6;
  padding: 0.80952rem 1.61905rem; }
  .btn-main,
  .btn-main:hover,
  .btn-main:focus,
  .btn-main:active {
    color: #fff; }
  .btn-main:hover,
  .btn-main:focus {
    opacity: 0.7;
    transition: opacity 0.1s linear; }

/**
 * Modifier: secondary colour.
 */
.btn-main--secondary {
  background-color: #0aaaff; }
  .btn-main--secondary,
  .btn-main--secondary:hover,
  .btn-main--secondary:focus,
  .btn-main--secondary:active {
    color: #fff; }

/**
 * Modifier: tiny padding.
 */
.btn-main--tiny {
  padding: 0.26984rem 0.53968rem; }

/**
 * Modifier: small padding.
 */
.btn-main--small {
  padding: 0.40476rem 0.80952rem; }

/**
 * Modifier: large padding.
 */
.btn-main--large {
  padding: 1.21429rem 2.42857rem; }

/**
 * Modifier: huge padding.
 */
.btn-main--huge {
  padding: 1.61905rem 3.2381rem; }

/**
 * Modifier: full bleed.
 */
.btn-main--full-bleed {
  display: block;
  width: 100%; }

/**
 * UTILITIES.
 */
/* ============================================================================
   @UTILITIES -> DISPLAY
   ========================================================================= */
/**
 * A utility for applying the most common types of box renderings and for
 * hiding / showing elements.
 *
 * @todo
 * Look at adding 'Flexbox'.
 *
 * @demo
 * http://codepen.io/team/westfieldlabs/full/xFHfk#display
 */
/**
 * Settings.
 */
/**
 * Apply at breakpoints.
 */
/**
 * Block, inline, and inline-block display.
 */
.u-display-block {
  display: block; }

.u-display-inline {
  display: inline; }

.u-display-inline-block {
  display: inline-block; }

/**
 * Table display.
 */
.u-display-table {
  display: table; }

.u-display-table-row {
  display: table-row; }

.u-display-table-cell {
  display: table-cell; }

/**
 * Inherit.
 */
.u-display-inherit {
  display: inherit; }

/**
 * Hide elements from both screen readers and the document flow.
 */
.u-hide {
  display: none;
  visibility: hidden; }

/**
 * Hide elements without affecting the document flow.
 */
.u-hide-invisible {
  visibility: hidden; }

/**
 * Hide elements only visually but have it available for screen readers.
 */
.u-hide-visually {
  position: absolute;
  height: 1px;
  width: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  margin: -1px;
  padding: 0;
  border: 0;
  /**
   * Form `legend`s need different treatment.
   */ }
  .u-hide-visually.legend {
    left: -9999px; }

/**
 * Hide elements for JavaScript users and non-JavaScript users, this is
 * necessary when building accessibile and progressively enhanced UI's.
 *
 * N.B. this will require functionality that can append a hook to an element
 * (typically the `html` element) if JavaScript is on.
 *
 * N.B. it is okay to use `!important` here as we're doing it pre-emptively
 * i.e. you know you will always want the rule it's applied too to take
 * precedence.
 */
.js .u-hide-if-js-is-on {
  display: none !important; }

.no-js .u-hide-if-js-is-off {
  display: none !important; }

/**
 * Hide / show elements for print media.
 */
.u-show-for-print,
.u-show-for-print-inline,
.u-show-for-print-inline-block {
  display: none; }

@media print {
  .u-hide-for-print {
    display: none; }

  .u-show-for-print {
    display: block; }

  .u-show-for-print-inline {
    display: inline; }

  .u-show-for-print-inline-block {
    display: inline-block; } }
/* ============================================================================
   @UTILITIES -> DIVIDER
   ========================================================================= */
/**
 * Create a divider between elements.
 *
 * @demo
 * http://codepen.io/team/westfieldlabs/full/xFHfk#divider
 */
/**
 * Settings.
 */
/**
 * Apply at breakpoints.
 */
/**
 * Top.
 */
.u-divider-top {
  border-top: 0.04762rem solid #2f363b; }

/**
 * Right.
 */
.u-divider-right {
  border-right: 0.04762rem solid #2f363b; }

/**
 * Bottom.
 */
.u-divider-bottom {
  border-bottom: 0.04762rem solid #2f363b; }

/**
 * Left.
 */
.u-divider-left {
  border-left: 0.04762rem solid #2f363b; }

/* ============================================================================
   @UTILITIES -> LIST
   ========================================================================= */
/**
 * Standard list styles for unordered and ordered lists as they're removed in
 * Core -> Reset.
 *
 * N.B. this utility is dependant on the following utility:
 *
 * - Spacing.
 *
 * @demo
 * http://codepen.io/team/westfieldlabs/full/xFHfk#list
 */
/**
 * Settings.
 */
/**
 * Apply at breakpoints.
 */
/**
 * Whitespace.
 */
.u-list,
.u-list ul,
.u-list ol {
  margin-left: 1.61905rem; }

/**
 * Bullets.
 *
 * For unordered lists we're replicating the native browser bullets:
 * - disc
 *  -- circle
 *    --- square
 */
ul.u-list {
  list-style-type: disc; }

ol.u-list {
  list-style-type: decimal; }

ul.u-list ul,
ol.u-list ul {
  list-style-type: circle; }
  ul.u-list ul ul,
  ol.u-list ul ul {
    list-style-type: square; }
ul.u-list ol,
ol.u-list ol {
  list-style-type: decimal; }

/* ============================================================================
   @UTILITIES -> LIST INLINE
   ========================================================================= */
/**
 * Make list items for `ul` and `ol` elements render in one line which can be
 * extended with a number of modifiers.
 *
 * N.B. This utility requires that you remove the whitespace between `li`s
 * especially with the Spacing modifiers. One way to remove whitespace is by
 * inserting HTML comments between the opening and closing `li`s e.g.
 *
   <ul class="u-list-inline">
     <li>Lorem</li><!--
     --><li>Aliquam</li><!--
     --><li>Vestibulum</li>
   </ul>
 *
 * Or you can omit the closing `li` which we don't recommend :)
 *
 * @demo
 * http://codepen.io/team/westfieldlabs/full/xFHfk#list-inline
 */
/**
 * Settings.
 */
/**
 * Apply at breakpoints.
 */
.u-list-inline > li {
  display: inline-block; }

@media (min-width: 40.0625em) {
  .u-list-inline-from-lap > li {
    display: inline-block; } }
/**
 * Modifier: spacing.
 *
 * Add spacing between the list items. The default is to apply spacing to the
 * outside of the list items via `margin-left` but there's a version where the
 * spacing can be applied to both sides via `margin-left` and `padding-left`.
 * And we offset the spacing from the first list item by using a negative
 * `margin-left` on the `ul`, this is the most optimal way of handling this as
 * there can be cases where the list items wrap onto multiple lines.
 */
/**
 * Base.
 */
.u-list-inline--spacing-base {
  margin-left: -1.61905rem; }
  .u-list-inline--spacing-base > li {
    margin-left: 1.61905rem; }

.u-list-inline--spacing-base-both {
  margin-left: -3.2381rem; }
  .u-list-inline--spacing-base-both > li {
    margin-left: 1.61905rem;
    padding-left: 1.61905rem; }

/**
 * Tiny.
 */
.u-list-inline--spacing-tiny {
  margin-left: -0.53968rem; }
  .u-list-inline--spacing-tiny > li {
    margin-left: 0.53968rem; }

.u-list-inline--spacing-tiny-both {
  margin-left: -1.07937rem; }
  .u-list-inline--spacing-tiny-both > li {
    margin-left: 0.53968rem;
    padding-left: 0.53968rem; }

/**
 * Small.
 */
.u-list-inline--spacing-small {
  margin-left: -0.80952rem; }
  .u-list-inline--spacing-small > li {
    margin-left: 0.80952rem; }

.u-list-inline--spacing-small-both {
  margin-left: -1.61905rem; }
  .u-list-inline--spacing-small-both > li {
    margin-left: 0.80952rem;
    padding-left: 0.80952rem; }

/**
 * Large.
 */
.u-list-inline--spacing-large {
  margin-left: -2.42857rem; }
  .u-list-inline--spacing-large > li {
    margin-left: 2.42857rem; }

.u-list-inline--spacing-large-both {
  margin-left: -4.85714rem; }
  .u-list-inline--spacing-large-both > li {
    margin-left: 2.42857rem;
    padding-left: 2.42857rem; }

/**
 * Huge.
 */
.u-list-inline--spacing-huge {
  margin-left: -3.2381rem; }
  .u-list-inline--spacing-huge > li {
    margin-left: 3.2381rem; }

.u-list-inline--spacing-huge-both {
  margin-left: -6.47619rem; }
  .u-list-inline--spacing-huge-both > li {
    margin-left: 3.2381rem;
    padding-left: 3.2381rem; }

/**
 * Modifier: divider.
 *
 * Add a keyline separator between the list items.
 */
.u-list-inline--divider > li + li {
  border-left: 0.04762rem solid #2f363b; }

/**
 * Modifier: fit.
 *
 * Force the list items to occupy 100% of the available width of its parent.
 */
.u-list-inline--fit-flexbox {
  display: flex;
  flex-flow: row wrap;
  justify-content: space-around; }

.u-list-inline--fit-table {
  display: table;
  width: 100%; }
  .u-list-inline--fit-table > li {
    display: table-cell; }

/**
 * Modifier: delimited.
 *
 * List items separated by a few different separators.
 */
.u-list-inline--delimited-slash > li + li:before {
  content: "/"; }

.u-list-inline--delimited-slash[class*="u-list-inline--spacing"] > li +
li:before {
  display: inline-block; }

.u-list-inline--spacing-base.u-list-inline--delimited-slash > li + li:before {
  margin-right: 1.61905rem; }

.u-list-inline--spacing-tiny.u-list-inline--delimited-slash > li + li:before {
  margin-right: 0.53968rem; }

.u-list-inline--spacing-small.u-list-inline--delimited-slash > li + li:before {
  margin-right: 0.80952rem; }

.u-list-inline--spacing-large.u-list-inline--delimited-slash > li + li:before {
  margin-right: 2.42857rem; }

.u-list-inline--spacing-huge.u-list-inline--delimited-slash > li + li:before {
  margin-right: 3.2381rem; }

.u-list-inline--delimited-comma > li + li:before {
  content: ","; }

/* ============================================================================
   @UTILITIES -> POSITION
   ========================================================================= */
/**
 * Various utilities for positioning elements.
 *
 * @demo
 * http://codepen.io/team/westfieldlabs/full/xFHfk#position
 */
/**
 * Settings.
 */
/**
 * Apply at breakpoints.
 */
/**
 * Set positioning contexts.
 */
.u-position-relative {
  position: relative; }

.u-position-absolute {
  position: absolute; }

.u-position-fixed {
  position: fixed; }

.u-position-static {
  position: static; }

/**
 * Different ways to position an element.
 */
.u-position-left {
  left: 0; }

.u-position-right {
  right: 0; }

.u-position-top {
  top: 0; }

.u-position-bottom {
  bottom: 0; }

.u-position-top-left {
  top: 0;
  left: 0; }

.u-position-top-right {
  top: 0;
  right: 0; }

.u-position-bottom-left {
  bottom: 0;
  left: 0; }

.u-position-bottom-right {
  bottom: 0;
  right: 0; }

.u-position-pin-all {
  left: 0;
  right: 0;
  top: 0;
  bottom: 0; }

.u-position-pin-ends {
  top: 0;
  bottom: 0; }

.u-position-pin-sides {
  left: 0;
  right: 0; }

.u-position-pin-sides-top {
  left: 0;
  right: 0;
  top: 0; }

.u-position-pin-sides-bottom {
  left: 0;
  right: 0;
  bottom: 0; }

.u-position-v-middle {
  top: 50%;
  transform: translateY(-50%); }

.u-position-h-middle {
  left: 50%;
  transform: translateX(-50%); }

.u-position-middle {
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%); }

/* ============================================================================
   @UTILITIES -> SIDE-BY-SIDE ALTERNATE VERSION
   ========================================================================= */
/**
 * This is the same as the default Side-by-side utility however it
 * utilises `display: table[-cell];` to give us control over vertical
 * alignment.
 *
 * @demo
 * http://codepen.io/team/westfieldlabs/full/xFHfk#side-by-side-alt
 *
 * @credit
 * https://github.com/inuitcss/objects.flag/blob/master/_objects.flag.scss
 */
/**
 * Settings.
 */
/**
 * 1. Allows us to control vertical alignments.
 * 2. Force the utility to be the full width of its parent. Combined with [1],
 *    this makes the utility behave in a quasi-`display: block;` manner.
 */
.u-side-by-side-alt {
  display: table;
  width: 100%; }

/**
 * Modifier: reversed.
 *
 * 1. Swap the rendered direction of the object.
 */
.u-side-by-side-alt--reversed {
  direction: rtl; }

/**
 * Modifier: shrink-wrap.
 *
 * Make the utility be the width of it's content not it's parent as per the
 * default.
 */
.u-side-by-side-alt--shrink-wrap {
  width: auto; }

/**
 * Modifier: remove.
 *
 * Turn off the side-by-side layout so the two elements stack on top of
 * each other at the palm breakpoint (or whatever you specify) and provide
 * bottom spacing between the two elements via the gutter size settings.
 *
 * Make optional as this uses a fair amount of CSS.
 *
 * N.B. we use a `max-width` media query for this which is something we
 * wouldn't usually do as we build Mobile First however this is simply the
 * most pragmatic way of accomplishing this. Also this utility's default
 * state is side-by-side, so its stacked state is the exception, rather
 * than the rule.
 *
 * 1. Disable reversal of content because there is no concept of 'reversed' in
 *    a stacked layout.
 */
@media (max-width: 40em) {
  .u-side-by-side-alt--remove {
    direction: ltr; } }
/**
 * The two sides of the utility. There should only ever be one of each.
 *
 * 1. Default to aligning content to their middles.
 */
.u-side-by-side-alt__left,
.u-side-by-side-alt__right {
  display: table-cell;
  vertical-align: middle;
  /**
   * Modifier: reversed.
   *
   * Switch the sides i.e. left becomes right and right becomes left.
   *
   * 1. Reset the rendered direction of the utility.
   */
  /**
   * Modifiers: vertical alignments.
   */
  /**
   * Modifier: remove.
   */ }
  .u-side-by-side-alt--reversed > .u-side-by-side-alt__left, .u-side-by-side-alt--reversed >
  .u-side-by-side-alt__right {
    direction: ltr; }
  .u-side-by-side-alt--top > .u-side-by-side-alt__left, .u-side-by-side-alt--top >
  .u-side-by-side-alt__right {
    vertical-align: top; }
  .u-side-by-side-alt--bottom > .u-side-by-side-alt__left, .u-side-by-side-alt--bottom >
  .u-side-by-side-alt__right {
    vertical-align: bottom; }
  @media (max-width: 40em) {
    .u-side-by-side-alt--remove > .u-side-by-side-alt__left, .u-side-by-side-alt--remove >
    .u-side-by-side-alt__right {
      display: block; } }

/**
 * Left side.
 */
.u-side-by-side-alt__left {
  padding-right: 1.61905rem;
  /**
   * Modifiers: gutter sizing.
   */
  /**
   * Modifiers: reversed.
   *
   * 1. Reassign paddings to the correct sides.
   */
  /**
   * Modifier: flush.
   *
   * Remove the gutter.
   */
  /**
   * Modifier: remove.
   */
  /**
   * Need to turn off responsive images otherwise it breaks.
   */ }
  .u-side-by-side-alt--gutter-tiny > .u-side-by-side-alt__left {
    padding-right: 0.53968rem; }
  .u-side-by-side-alt--gutter-small > .u-side-by-side-alt__left {
    padding-right: 0.80952rem; }
  .u-side-by-side-alt--gutter-large > .u-side-by-side-alt__left {
    padding-right: 2.42857rem; }
  .u-side-by-side-alt--gutter-huge > .u-side-by-side-alt__left {
    padding-right: 3.2381rem; }
  .u-side-by-side-alt--reversed > .u-side-by-side-alt__left {
    padding-right: 0;
    padding-left: 1.61905rem; }
  .u-side-by-side-alt--reversed.u-side-by-side-alt--gutter-tiny > .u-side-by-side-alt__left {
    padding-left: 0.53968rem; }
  .u-side-by-side-alt--reversed.u-side-by-side-alt--gutter-small > .u-side-by-side-alt__left {
    padding-left: 0.80952rem; }
  .u-side-by-side-alt--reversed.u-side-by-side-alt--gutter-large > .u-side-by-side-alt__left {
    padding-left: 2.42857rem; }
  .u-side-by-side-alt--reversed.u-side-by-side-alt--gutter-huge > .u-side-by-side-alt__left {
    padding-left: 3.2381rem; }
  .u-side-by-side-alt--flush > .u-side-by-side-alt__left {
    padding-right: 0; }
  .u-side-by-side-alt--reversed.u-side-by-side-alt--flush > .u-side-by-side-alt__left {
    padding-left: 0; }
  @media (max-width: 40em) {
    .u-side-by-side-alt__left {
      /**
       * Modifiers: bottom spacing sizing.
       */
      /**
       * Modifier: flush.
       *
       * Remove the bottom spacing.
       */ }
      .u-side-by-side-alt--remove > .u-side-by-side-alt__left {
        padding-right: 0;
        padding-left: 0;
        margin-bottom: 1.61905rem; }
      .u-side-by-side-alt--remove.u-side-by-side-alt--gutter-tiny > .u-side-by-side-alt__left {
        margin-bottom: 0.53968rem; }
      .u-side-by-side-alt--remove.u-side-by-side-alt--gutter-small > .u-side-by-side-alt__left {
        margin-bottom: 0.80952rem; }
      .u-side-by-side-alt--remove.u-side-by-side-alt--gutter-large > .u-side-by-side-alt__left {
        margin-bottom: 2.42857rem; }
      .u-side-by-side-alt--remove.u-side-by-side-alt--gutter-huge > .u-side-by-side-alt__left {
        margin-bottom: 3.2381rem; }
      .u-side-by-side-alt--remove.u-side-by-side-alt--flush > .u-side-by-side-alt__left {
        margin-bottom: 0; } }
  .u-side-by-side-alt__left > img {
    max-width: none;
    /**
     * Modifier: remove.
     *
     * Bring back responsive images for stacked version.
     */ }
    @media (max-width: 40em) {
      .u-side-by-side-alt__left > img {
        max-width: 100%; } }

/* ============================================================================
   @UTILITIES -> SPACING
   ========================================================================= */
/**
 * A powerful utility to apply and remove spacing (whitespace) via `margin`
 * and `padding`. All spacing uses the spacing settings from Core -> Settings
 * -> Spacing.
 *
 * N.B. This is one of the rare occasions where the class/placeholder is
 * shortened.
 *
 * Naming convention:
 *
 * [1 | 2 | 3 | 4 | 5 | 6 | 7]
 *
 * 1. Scally type:              utility [u]
 * 2. Utility name:             spacing [s]
 * 3. Spacing type/direction:   margin [m] / padding [p] | top [t] / right [r]
 *                              / bottom [b] / left [l] / sides [s] / ends [e]
 * 5. Spacing negative:         negative [n]
 * 6. Spacing remove:           this is explicit
 * 7. Spacing amount:           this is explicit
 *
 * @demo
 * http://codepen.io/team/westfieldlabs/full/xFHfk#spacing
 *
 * @credit
 * https://github.com/stubbornella/oocss/blob/master/oocss/src/components/whitespace/_whitespace.scss
 */
/**
 * Settings.
 */
/**
 * Apply at breakpoints.
 */
/**
 * Base.
 */
.u-s-m-base {
  margin: 1.61905rem; }

.u-s-p-base {
  padding: 1.61905rem; }

.u-s-m-n-base {
  margin: -1.61905rem; }

.u-s-p-n-base {
  padding: -1.61905rem; }

.u-s-mt-base {
  margin-top: 1.61905rem; }

.u-s-pt-base {
  padding-top: 1.61905rem; }

.u-s-mt-n-base {
  margin-top: -1.61905rem; }

.u-s-pt-n-base {
  padding-top: -1.61905rem; }

.u-s-mr-base {
  margin-right: 1.61905rem; }

.u-s-pr-base {
  padding-right: 1.61905rem; }

.u-s-mr-n-base {
  margin-right: -1.61905rem; }

.u-s-pr-n-base {
  padding-right: -1.61905rem; }

.u-list,
.u-s-mb-base {
  margin-bottom: 1.61905rem; }

details[open],
.u-s-pb-base {
  padding-bottom: 1.61905rem; }

.u-s-mb-n-base {
  margin-bottom: -1.61905rem; }

.u-s-pb-n-base {
  padding-bottom: -1.61905rem; }

.u-s-ml-base {
  margin-left: 1.61905rem; }

.u-s-pl-base {
  padding-left: 1.61905rem; }

.u-s-ml-n-base {
  margin-left: -1.61905rem; }

.u-s-pl-n-base {
  padding-left: -1.61905rem; }

.u-s-ms-base {
  margin-left: 1.61905rem;
  margin-right: 1.61905rem; }

details[open],
.u-s-ps-base {
  padding-left: 1.61905rem;
  padding-right: 1.61905rem; }

.u-s-ms-n-base {
  margin-left: -1.61905rem;
  margin-right: -1.61905rem; }

.u-s-ps-n-base {
  padding-left: -1.61905rem;
  padding-right: -1.61905rem; }

.u-s-me-base {
  margin-top: 1.61905rem;
  margin-bottom: 1.61905rem; }

.u-s-pe-base {
  padding-top: 1.61905rem;
  padding-bottom: 1.61905rem; }

.u-s-me-n-base {
  margin-top: -1.61905rem;
  margin-bottom: -1.61905rem; }

.u-s-pe-n-base {
  padding-top: -1.61905rem;
  padding-bottom: -1.61905rem; }

/**
 * Micro.
 */
.u-s-m-micro {
  margin: 0.09524rem; }

.u-s-p-micro {
  padding: 0.09524rem; }

.u-s-m-n-micro {
  margin: -0.09524rem; }

.u-s-p-n-micro {
  padding: -0.09524rem; }

.u-s-mt-micro {
  margin-top: 0.09524rem; }

.u-s-pt-micro {
  padding-top: 0.09524rem; }

.u-s-mt-n-micro {
  margin-top: -0.09524rem; }

.u-s-pt-n-micro {
  padding-top: -0.09524rem; }

.u-s-mr-micro {
  margin-right: 0.09524rem; }

.u-s-pr-micro {
  padding-right: 0.09524rem; }

.u-s-mr-n-micro {
  margin-right: -0.09524rem; }

.u-s-pr-n-micro {
  padding-right: -0.09524rem; }

.u-s-mb-micro {
  margin-bottom: 0.09524rem; }

.u-s-pb-micro {
  padding-bottom: 0.09524rem; }

.u-s-mb-n-micro {
  margin-bottom: -0.09524rem; }

.u-s-pb-n-micro {
  padding-bottom: -0.09524rem; }

.u-s-ml-micro {
  margin-left: 0.09524rem; }

.u-s-pl-micro {
  padding-left: 0.09524rem; }

.u-s-ml-n-micro {
  margin-left: -0.09524rem; }

.u-s-pl-n-micro {
  padding-left: -0.09524rem; }

.u-s-ms-micro {
  margin-left: 0.09524rem;
  margin-right: 0.09524rem; }

.u-s-ps-micro {
  padding-left: 0.09524rem;
  padding-right: 0.09524rem; }

.u-s-ms-n-micro {
  margin-left: -0.09524rem;
  margin-right: -0.09524rem; }

.u-s-ps-n-micro {
  padding-left: -0.09524rem;
  padding-right: -0.09524rem; }

.u-s-me-micro {
  margin-top: 0.09524rem;
  margin-bottom: 0.09524rem; }

.u-s-pe-micro {
  padding-top: 0.09524rem;
  padding-bottom: 0.09524rem; }

.u-s-me-n-micro {
  margin-top: -0.09524rem;
  margin-bottom: -0.09524rem; }

.u-s-pe-n-micro {
  padding-top: -0.09524rem;
  padding-bottom: -0.09524rem; }

/**
 * Tiny.
 */
.u-s-m-tiny {
  margin: 0.53968rem; }

.u-s-p-tiny {
  padding: 0.53968rem; }

.u-s-m-n-tiny {
  margin: -0.53968rem; }

.u-s-p-n-tiny {
  padding: -0.53968rem; }

.u-s-mt-tiny {
  margin-top: 0.53968rem; }

.u-s-pt-tiny {
  padding-top: 0.53968rem; }

.u-s-mt-n-tiny {
  margin-top: -0.53968rem; }

.u-s-pt-n-tiny {
  padding-top: -0.53968rem; }

.u-s-mr-tiny {
  margin-right: 0.53968rem; }

.u-s-pr-tiny {
  padding-right: 0.53968rem; }

.u-s-mr-n-tiny {
  margin-right: -0.53968rem; }

.u-s-pr-n-tiny {
  padding-right: -0.53968rem; }

.u-s-mb-tiny {
  margin-bottom: 0.53968rem; }

.u-s-pb-tiny {
  padding-bottom: 0.53968rem; }

.u-s-mb-n-tiny {
  margin-bottom: -0.53968rem; }

.u-s-pb-n-tiny {
  padding-bottom: -0.53968rem; }

.u-s-ml-tiny {
  margin-left: 0.53968rem; }

.u-s-pl-tiny {
  padding-left: 0.53968rem; }

.u-s-ml-n-tiny {
  margin-left: -0.53968rem; }

.u-s-pl-n-tiny {
  padding-left: -0.53968rem; }

.u-s-ms-tiny {
  margin-left: 0.53968rem;
  margin-right: 0.53968rem; }

.u-s-ps-tiny {
  padding-left: 0.53968rem;
  padding-right: 0.53968rem; }

.u-s-ms-n-tiny {
  margin-left: -0.53968rem;
  margin-right: -0.53968rem; }

.u-s-ps-n-tiny {
  padding-left: -0.53968rem;
  padding-right: -0.53968rem; }

.u-s-me-tiny {
  margin-top: 0.53968rem;
  margin-bottom: 0.53968rem; }

.u-s-pe-tiny {
  padding-top: 0.53968rem;
  padding-bottom: 0.53968rem; }

.u-s-me-n-tiny {
  margin-top: -0.53968rem;
  margin-bottom: -0.53968rem; }

.u-s-pe-n-tiny {
  padding-top: -0.53968rem;
  padding-bottom: -0.53968rem; }

/**
 * Small.
 */
.u-s-m-small {
  margin: 0.80952rem; }

.u-s-p-small {
  padding: 0.80952rem; }

.u-s-m-n-small {
  margin: -0.80952rem; }

.u-s-p-n-small {
  padding: -0.80952rem; }

.u-s-mt-small {
  margin-top: 0.80952rem; }

.u-s-pt-small {
  padding-top: 0.80952rem; }

.u-s-mt-n-small {
  margin-top: -0.80952rem; }

.u-s-pt-n-small {
  padding-top: -0.80952rem; }

.u-s-mr-small {
  margin-right: 0.80952rem; }

.u-s-pr-small {
  padding-right: 0.80952rem; }

.u-s-mr-n-small {
  margin-right: -0.80952rem; }

.u-s-pr-n-small {
  padding-right: -0.80952rem; }

.u-s-mb-small {
  margin-bottom: 0.80952rem; }

.u-s-pb-small {
  padding-bottom: 0.80952rem; }

.u-s-mb-n-small {
  margin-bottom: -0.80952rem; }

.u-s-pb-n-small {
  padding-bottom: -0.80952rem; }

.u-s-ml-small {
  margin-left: 0.80952rem; }

.u-s-pl-small {
  padding-left: 0.80952rem; }

.u-s-ml-n-small {
  margin-left: -0.80952rem; }

.u-s-pl-n-small {
  padding-left: -0.80952rem; }

.u-s-ms-small {
  margin-left: 0.80952rem;
  margin-right: 0.80952rem; }

.u-s-ps-small {
  padding-left: 0.80952rem;
  padding-right: 0.80952rem; }

.u-s-ms-n-small {
  margin-left: -0.80952rem;
  margin-right: -0.80952rem; }

.u-s-ps-n-small {
  padding-left: -0.80952rem;
  padding-right: -0.80952rem; }

.u-s-me-small {
  margin-top: 0.80952rem;
  margin-bottom: 0.80952rem; }

summary,
.u-s-pe-small {
  padding-top: 0.80952rem;
  padding-bottom: 0.80952rem; }

.u-s-me-n-small {
  margin-top: -0.80952rem;
  margin-bottom: -0.80952rem; }

.u-s-pe-n-small {
  padding-top: -0.80952rem;
  padding-bottom: -0.80952rem; }

/**
 * Large.
 */
.u-s-m-large {
  margin: 2.42857rem; }

.u-s-p-large {
  padding: 2.42857rem; }

.u-s-m-n-large {
  margin: -2.42857rem; }

.u-s-p-n-large {
  padding: -2.42857rem; }

.u-s-mt-large {
  margin-top: 2.42857rem; }

.u-s-pt-large {
  padding-top: 2.42857rem; }

.u-s-mt-n-large {
  margin-top: -2.42857rem; }

.u-s-pt-n-large {
  padding-top: -2.42857rem; }

.u-s-mr-large {
  margin-right: 2.42857rem; }

.u-s-pr-large {
  padding-right: 2.42857rem; }

.u-s-mr-n-large {
  margin-right: -2.42857rem; }

.u-s-pr-n-large {
  padding-right: -2.42857rem; }

.u-s-mb-large {
  margin-bottom: 2.42857rem; }

.u-s-pb-large {
  padding-bottom: 2.42857rem; }

.u-s-mb-n-large {
  margin-bottom: -2.42857rem; }

.u-s-pb-n-large {
  padding-bottom: -2.42857rem; }

.u-s-ml-large {
  margin-left: 2.42857rem; }

.u-s-pl-large {
  padding-left: 2.42857rem; }

.u-s-ml-n-large {
  margin-left: -2.42857rem; }

.u-s-pl-n-large {
  padding-left: -2.42857rem; }

.u-s-ms-large {
  margin-left: 2.42857rem;
  margin-right: 2.42857rem; }

.u-s-ps-large {
  padding-left: 2.42857rem;
  padding-right: 2.42857rem; }

.u-s-ms-n-large {
  margin-left: -2.42857rem;
  margin-right: -2.42857rem; }

.u-s-ps-n-large {
  padding-left: -2.42857rem;
  padding-right: -2.42857rem; }

.u-s-me-large {
  margin-top: 2.42857rem;
  margin-bottom: 2.42857rem; }

.u-s-pe-large {
  padding-top: 2.42857rem;
  padding-bottom: 2.42857rem; }

.u-s-me-n-large {
  margin-top: -2.42857rem;
  margin-bottom: -2.42857rem; }

.u-s-pe-n-large {
  padding-top: -2.42857rem;
  padding-bottom: -2.42857rem; }

/**
 * Huge.
 */
.u-s-m-huge {
  margin: 3.2381rem; }

.u-s-p-huge {
  padding: 3.2381rem; }

.u-s-m-n-huge {
  margin: -3.2381rem; }

.u-s-p-n-huge {
  padding: -3.2381rem; }

.u-s-mt-huge {
  margin-top: 3.2381rem; }

.u-s-pt-huge {
  padding-top: 3.2381rem; }

.u-s-mt-n-huge {
  margin-top: -3.2381rem; }

.u-s-pt-n-huge {
  padding-top: -3.2381rem; }

.u-s-mr-huge {
  margin-right: 3.2381rem; }

.u-s-pr-huge {
  padding-right: 3.2381rem; }

.u-s-mr-n-huge {
  margin-right: -3.2381rem; }

.u-s-pr-n-huge {
  padding-right: -3.2381rem; }

.u-s-mb-huge {
  margin-bottom: 3.2381rem; }

.u-s-pb-huge {
  padding-bottom: 3.2381rem; }

.u-s-mb-n-huge {
  margin-bottom: -3.2381rem; }

.u-s-pb-n-huge {
  padding-bottom: -3.2381rem; }

.u-s-ml-huge {
  margin-left: 3.2381rem; }

.u-s-pl-huge {
  padding-left: 3.2381rem; }

.u-s-ml-n-huge {
  margin-left: -3.2381rem; }

.u-s-pl-n-huge {
  padding-left: -3.2381rem; }

.u-s-ms-huge {
  margin-left: 3.2381rem;
  margin-right: 3.2381rem; }

.u-s-ps-huge {
  padding-left: 3.2381rem;
  padding-right: 3.2381rem; }

.u-s-ms-n-huge {
  margin-left: -3.2381rem;
  margin-right: -3.2381rem; }

.u-s-ps-n-huge {
  padding-left: -3.2381rem;
  padding-right: -3.2381rem; }

.u-s-me-huge {
  margin-top: 3.2381rem;
  margin-bottom: 3.2381rem; }

.u-s-pe-huge {
  padding-top: 3.2381rem;
  padding-bottom: 3.2381rem; }

.u-s-me-n-huge {
  margin-top: -3.2381rem;
  margin-bottom: -3.2381rem; }

.u-s-pe-n-huge {
  padding-top: -3.2381rem;
  padding-bottom: -3.2381rem; }

/**
 * None.
 */
.u-s-m-none {
  margin: 0; }

.u-s-p-none {
  padding: 0; }

.u-s-mt-none {
  margin-top: 0; }

.u-s-pt-none {
  padding-top: 0; }

.u-s-mr-none {
  margin-right: 0; }

.u-s-pr-none {
  padding-right: 0; }

.u-s-mb-none {
  margin-bottom: 0; }

.u-s-pb-none {
  padding-bottom: 0; }

.u-s-ml-none {
  margin-left: 0; }

.u-s-pl-none {
  padding-left: 0; }

.u-s-ms-none {
  margin-left: 0;
  margin-right: 0; }

.u-s-ps-none {
  padding-left: 0;
  padding-right: 0; }

.u-s-me-none {
  margin-top: 0;
  margin-bottom: 0; }

.u-s-pe-none {
  padding-top: 0;
  padding-bottom: 0; }

/**
 * Generates all breakpoint classes.
 */
/* ============================================================================
   @UTILITIES -> TEXT
   ========================================================================= */
/**
 * Various handy utilities for text.
 *
 * @demo
 * http://codepen.io/team/westfieldlabs/full/xFHfk#text
 */
/**
 * Settings.
 */
/**
 * Apply at breakpoints.
 */
/**
 * Size.
 */
.u-text-size-small {
  font-size: 0.95238rem;
  line-height: 1.7; }

.u-text-size-x-small {
  font-size: 0.90476rem;
  line-height: 1.78947; }

.u-text-size-xx-small {
  font-size: 0.85714rem;
  line-height: 1.88889; }

.u-text-size-xxx-small {
  font-size: 0.80952rem;
  line-height: 2; }

.u-text-size-large {
  font-size: 1.04762rem;
  line-height: 1.54545; }

.u-text-size-x-large {
  font-size: 1.09524rem;
  line-height: 1.47826; }

.u-text-size-xx-large {
  font-size: 1.14286rem;
  line-height: 1.41667; }

.u-text-size-xxx-large {
  font-size: 1.19048rem;
  line-height: 1.36; }

.u-text-size-base {
  font-size: 1rem;
  line-height: 1.61905; }

.u-text-size-inherit {
  font-size: inherit; }

/**
 * Alignment.
 */
.u-text-align-center {
  text-align: center; }

.u-text-align-left {
  text-align: left; }

@media (min-width: 40.0625em) {
  .u-text-align-left-from-lap {
    text-align: left; } }
.u-text-align-right {
  text-align: right; }

.u-text-align-inherit {
  text-align: inherit; }

/**
 * Style.
 */
.u-text-style-italic {
  font-style: italic; }

.u-text-style-normal {
  font-style: normal; }

.u-text-style-inherit {
  font-style: inherit; }

/**
 * Weight.
 */
.u-text-weight-lighter {
  font-weight: lighter; }

.u-text-weight-bold {
  font-weight: bold; }

.u-text-weight-bolder {
  font-weight: bolder; }

.u-text-weight-inherit {
  font-weight: inherit; }

.u-text-weight-normal {
  font-weight: normal; }

/**
 * Transform.
 */
h3, h5,
.u-text-transform-uppercase {
  text-transform: uppercase; }

.u-text-transform-lowercase {
  text-transform: lowercase; }

.u-text-transform-capitalise {
  text-transform: capitalize; }

.u-text-transform-inherit {
  text-transform: inherit; }

.u-text-transform-none {
  text-transform: none; }

/**
 * Colour.
 */
.u-text-colour-white {
  color: #fff; }

.u-text-colour-black {
  color: #000; }

.u-text-colour-brand {
  color: #008CD6; }

.u-text-colour-text-base {
  color: #2f363b; }

.u-text-colour-text-primary {
  color: #008CD6; }

.u-text-colour-text-secondary {
  color: #0aaaff; }

.u-text-colour-inherit {
  color: inherit; }

/**
 * Whitespace.
 */
.u-text-whitespace-normal {
  white-space: normal; }

.u-text-whitespace-pre {
  white-space: pre; }

.u-text-whitespace-nowrap {
  white-space: nowrap; }

/**
 * Truncation.
 *
 * Prevent text from wrapping onto multiple lines, and truncate with an
 * ellipsis.
 *
 * 1. Ensure that the node has a maximum width after which truncation can
 *    occur.
 * 2. Fix for IE 8/9 if `word-wrap: break-word` is in effect on ancestor nodes.
 *
 * @credit
 * https://github.com/suitcss/utils-text/blob/master/lib/text.css
 */
.u-text-truncate {
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal; }

/**
 * Enables font kerning in all browsers.
 *
 * 1. Chrome (not Windows), Firefox, Safari 6+, iOS, Android.
 * 2. Chrome (not Windows), Firefox, IE 10+.
 * 3. Safari 7 and future browsers.
 *
 * @credit
 * http://blog.typekit.com/2014/02/05/kerning-on-the-web/
 */
.u-text-kern {
  text-rendering: optimizeLegibility;
  font-feature-settings: "kern" 1;
  font-kerning: normal; }

/**
 * Word breaking.
 *
 * Break strings when their length exceeds the width of their container.
 */
.u-text-break-word {
  word-wrap: break-word; }

/**
 * Hyphenation.
 */
.u-text-hyphenate {
  hyphens: auto; }

/* ============================================================================
   @UTILITIES -> WIDTHS
   ========================================================================= */
/**
 * Apply percentage based width classes with the option to apply at all the
 * main breakpoints. All the classes are the same as the Width settings found
 * in: Core -> Settings -> Widths, so `$one-whole` would be `.u-one-whole`.
 *
 * N.B. by default we're applying to the Lap breakpoint.
 */
/**
 * Settings.
 */
/**
 * Generate all the width classes.
 */
.u-one-whole {
  width: 100%; }

.u-one-half {
  width: 50%; }

.u-one-third {
  width: 33.33333%; }

.u-two-thirds {
  width: 66.66667%; }

.u-one-quarter {
  width: 25%; }

.u-two-quarters {
  width: 50%; }

.u-three-quarters {
  width: 75%; }

.u-one-fifth {
  width: 20%; }

.u-two-fifths {
  width: 40%; }

.u-three-fifths {
  width: 60%; }

.u-four-fifths {
  width: 80%; }

.u-one-sixth {
  width: 16.66667%; }

.u-two-sixths {
  width: 33.33333%; }

.u-three-sixths {
  width: 50%; }

.u-four-sixths {
  width: 66.66667%; }

.u-five-sixths {
  width: 83.33333%; }

.u-one-eighth {
  width: 12.5%; }

.u-two-eighths {
  width: 25%; }

.u-three-eighths {
  width: 37.5%; }

.u-four-eighths {
  width: 50%; }

.u-five-eighths {
  width: 62.5%; }

.u-six-eighths {
  width: 75%; }

.u-seven-eighths {
  width: 87.5%; }

.u-one-tenth {
  width: 10%; }

.u-two-tenths {
  width: 20%; }

.u-three-tenths {
  width: 30%; }

.u-four-tenths {
  width: 40%; }

.u-five-tenths {
  width: 50%; }

.u-six-tenths {
  width: 60%; }

.u-seven-tenths {
  width: 70%; }

.u-eight-tenths {
  width: 80%; }

.u-nine-tenths {
  width: 90%; }

.u-one-twelfth {
  width: 8.33333%; }

.u-two-twelfths {
  width: 16.66667%; }

.u-three-twelfths {
  width: 25%; }

.u-four-twelfths {
  width: 33.33333%; }

.u-five-twelfths {
  width: 41.66667%; }

.u-six-twelfths {
  width: 50%; }

.u-seven-twelfths {
  width: 58.33333%; }

.u-eight-twelfths {
  width: 66.66667%; }

.u-nine-twelfths {
  width: 75%; }

.u-ten-twelfths {
  width: 83.33333%; }

.u-eleven-twelfths {
  width: 91.66667%; }

@media (min-width: 40.0625em) {
  .u-one-whole-from-lap {
    width: 100%; }

  .u-one-half-from-lap {
    width: 50%; }

  .u-one-third-from-lap {
    width: 33.33333%; }

  .u-two-thirds-from-lap {
    width: 66.66667%; }

  .u-one-quarter-from-lap {
    width: 25%; }

  .u-two-quarters-from-lap {
    width: 50%; }

  .u-three-quarters-from-lap {
    width: 75%; }

  .u-one-fifth-from-lap {
    width: 20%; }

  .u-two-fifths-from-lap {
    width: 40%; }

  .u-three-fifths-from-lap {
    width: 60%; }

  .u-four-fifths-from-lap {
    width: 80%; }

  .u-one-sixth-from-lap {
    width: 16.66667%; }

  .u-two-sixths-from-lap {
    width: 33.33333%; }

  .u-three-sixths-from-lap {
    width: 50%; }

  .u-four-sixths-from-lap {
    width: 66.66667%; }

  .u-five-sixths-from-lap {
    width: 83.33333%; }

  .u-one-eighth-from-lap {
    width: 12.5%; }

  .u-two-eighths-from-lap {
    width: 25%; }

  .u-three-eighths-from-lap {
    width: 37.5%; }

  .u-four-eighths-from-lap {
    width: 50%; }

  .u-five-eighths-from-lap {
    width: 62.5%; }

  .u-six-eighths-from-lap {
    width: 75%; }

  .u-seven-eighths-from-lap {
    width: 87.5%; }

  .u-one-tenth-from-lap {
    width: 10%; }

  .u-two-tenths-from-lap {
    width: 20%; }

  .u-three-tenths-from-lap {
    width: 30%; }

  .u-four-tenths-from-lap {
    width: 40%; }

  .u-five-tenths-from-lap {
    width: 50%; }

  .u-six-tenths-from-lap {
    width: 60%; }

  .u-seven-tenths-from-lap {
    width: 70%; }

  .u-eight-tenths-from-lap {
    width: 80%; }

  .u-nine-tenths-from-lap {
    width: 90%; }

  .u-one-twelfth-from-lap {
    width: 8.33333%; }

  .u-two-twelfths-from-lap {
    width: 16.66667%; }

  .u-three-twelfths-from-lap {
    width: 25%; }

  .u-four-twelfths-from-lap {
    width: 33.33333%; }

  .u-five-twelfths-from-lap {
    width: 41.66667%; }

  .u-six-twelfths-from-lap {
    width: 50%; }

  .u-seven-twelfths-from-lap {
    width: 58.33333%; }

  .u-eight-twelfths-from-lap {
    width: 66.66667%; }

  .u-nine-twelfths-from-lap {
    width: 75%; }

  .u-ten-twelfths-from-lap {
    width: 83.33333%; }

  .u-eleven-twelfths-from-lap {
    width: 91.66667%; } }
/* Your styles
   ========================================================================= */
.l-container--narrow {
  max-width: 900; }

h1 {
  font-weight: 800; }

h3 {
  font-weight: 400; }

h5 {
  margin-bottom: 0; }

body {
  height: 100%;
  background: #f2f2f2; }

h2, .h2, h3, .h3, h4, .h4, h5, .h5, h6, .h6 {
  color: #008CD6; }

.header {
  background-color: #2f363b;
  color: #fff; }

.header__primary {
  padding-top: 34px; }

.nav-menu {
  background: #c6cfd4; }

.nav-menu__content {
  display: none; }
  .nav-menu__content a {
    display: inherit;
    text-align: center; }

main {
  background-color: #fff; }

blockquote {
  border-right: 4px solid #c6cfd4;
  font-style: italic; }

summary {
  border-bottom: 1px solid #000;
  text-transform: uppercase; }

details[open] {
  border-bottom: 1px solid #000; }
  details[open] summary {
    border-bottom: 0; }

/*# sourceMappingURL=style.css.map */
