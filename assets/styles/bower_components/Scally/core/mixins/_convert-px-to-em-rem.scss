/* ============================================================================
   @CORE -> MIXINS -> CONVERT PX TO EM/REM
   ========================================================================= */


/**
 * Convert `px` to `em`'s or `rem`'s for multiple properties or values or
 * both. Accepts a list of lists (instead a list of values) for properties
 * that accept multiple lists of values. Only numbers are converted;
 * everything else is passed through. For the `to-em` `@mixin` `$context` is
 * an optional argument that allows making measurements relative to the parent
 * font size rather than the current.
 *
 * @example
   @include to-em(line-height, 30);
   @include to-rem(line-height, 30);
   @include to-em(width height, 125);
   @include to-rem(padding, 0 25);
   @include to-em(text-shadow, (#0d6e28 1 1) (#777 0 0 2), 16);
   @include to-rem(box-shadow, (inset 0 0 0 1 #2a9022) (inset 0 0 3 #459966));
   @include to-em(padding margin, $spacing-base, $sledgehammer: !important);
   @include to-rem(margin, $spacing-base, !important);
 *
 * @demo
 * http://codepen.io/team/westfieldlabs/full/Bcfyz/#convert-px-to-rem
 *
 * @credit
 * https://gist.github.com/2237465
 */


/**
 * `em`.
 */

@mixin to-em($properties, $sizes, $context: $font-size, $sledgehammer: false) {

  $values: ();
  $sublists: false;
  $important: if($sledgehammer, "!important", "");

  @each $s in $sizes {

    @if type-of($s) == list {
      $sublists: true;
      $vv: ();

      @each $ss in $s {
        $vv: append($vv, if(type-of($ss) == number, #{$ss / $context}em, $ss));
      }

      $values: append($values, join((), $vv));
    }

    @else {
      $values: append($values, if(type-of($s) == number, #{$s / $context}em,
        $s));
    }

  }

  $value: join((), $values, if($sublists, comma, space));

  @each $prop in $properties {
    #{$prop}: $value#{$important};
  }

}


/**
 * `rem`.
 */

@mixin to-rem($properties, $sizes, $sledgehammer: "") {

  $values: ();
  $sublists: false;

  @each $s in $sizes {

    @if type-of($s) == list {
      $sublists: true;
      $vv: ();

      @each $ss in $s {
        $vv: append($vv, if(type-of($ss) == number, #{$ss / $font-size}rem,
          $ss));
      }

      $values: append($values, join((), $vv));
    }

    @else {
      $values: append($values, if(type-of($s) == number, #{$s / $font-size}rem,
        $s));
    }

  }

  $value: join((), $values, if($sublists, comma, space));

  @each $prop in $properties {
    #{$prop}: $value#{$sledgehammer};
  }

}