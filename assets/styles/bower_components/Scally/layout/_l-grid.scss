/* ============================================================================
   @LAYOUT -> GRID
   ========================================================================= */


/**
 * A powerful fluid and nestable mobile first grid system.
 *
 * Combine with the viewport specific width classes found in Utilities ->
 * Widths to apply grid widths at specific viewports, for example:
 *
   <div class="l-grid__item u-one-half-from-lap u-one-third-from-desk">
 *
 * This would give you a grid item which is 100% width unless it is on a lap
 * device, at which point it becomes 50% wide, or it is on a desktop device,
 * at which point it becomes 33.333% width. See breakpoints set here: Core ->
 * Settings -> Breakpoints.
 *
 * N.B. grid systems should be thought of as shelves. They contain content but
 * are not content in themselves. You put up your shelves then fill them with
 * your stuff. By setting up our grids separately to our components you can
 * move components around a lot more easily than if they had dimensions
 * applied to them; this makes our front-ends a lot more adaptable and quick
 * to work with.
 *
 * N.B. you should never apply any styles to a grid item, they are for layout
 * purposes only. Apply styling to content inside a grid item.
 *
 * @demo
 * http://codepen.io/team/westfieldlabs/full/cjyHK/
 *
 * @credit
 * https://github.com/csswizardry/csswizardry-grids/blob/master/csswizardry-grids.scss
 */


/**
 * Settings.
 */

/**
 * Apply at breakpoints.
 */

// Which breakpoints do you want to use?
$l-grid-breakpoints:                              $default-breakpoints
!default;

// What do you want to apply it too?
$l-grid-breakpoint-toggle-table:                  false !default;

$l-grid-breakpoint-toggle-table-v-align-middle:   false !default;

$l-grid-breakpoint-toggle-table-v-align-bottom:   false !default;

// Box sizing.
// Here we set a variable assuming that `box-sizing: border-box;` is not set
// globally. If it has been previously been defined, the following variable
// will be overriden and will be set to `true`.
$friendly-box-model:                              false !default;

// Gutter sizes
$l-grid-gutter-base:                              $spacing-base !default;

$l-grid-gutter-tiny:                              $spacing-third !default;

$l-grid-gutter-small:                             $spacing-half !default;

$l-grid-gutter-large:                             $spacing-base-plus-half
!default;

$l-grid-gutter-huge:                              $spacing-double !default;


/**
 * Grid container.
 *
 * 1. Negative `margin-left` to negate the columns gutters.
 * 2. So it can work on inline elements e.g. `span`.
 */

.l-grid {
  @include to-rem(margin-left, -$l-grid-gutter-base); // [1]
  display: block; // [2]

  // Clear fix
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}


  /**
   * 1. Cause columns to stack side-by-side.
   * 2. Space columns apart.
   * 3. Full-width unless told to behave otherwise.
   * 4. Required to combine fluid widths and fixed gutters.
   */

  .l-grid__item {
    float: left; // [1]
    @include to-rem(padding-left, $l-grid-gutter-base); // [2]
    width: 100%; // [3]

    @if $friendly-box-model == false {

      box-sizing: border-box; // [4]

    }//endif
  }


/**
 * Modifier: gutterless.
 */

.l-grid--gutterless {
  margin-left: 0;

  > .l-grid__item {padding-left: 0;}
}


/**
 * Modifier: gutter tiny.
 */

.l-grid--gutter-tiny {
  @include to-rem(margin-left, -$l-grid-gutter-tiny);

  > .l-grid__item {@include to-rem(padding-left, $l-grid-gutter-tiny);}
}


/**
 * Modifier: gutter small.
 */

.l-grid--gutter-small {
  @include to-rem(margin-left, -$l-grid-gutter-small);

  > .l-grid__item {@include to-rem(padding-left, $l-grid-gutter-small);}
}


/**
 * Modifier: gutter large.
 */

.l-grid--gutter-large {
  @include to-rem(margin-left, -$l-grid-gutter-large);

  > .l-grid__item {@include to-rem(padding-left, $l-grid-gutter-large);}
}


/**
 * Modifier: gutter huge.
 */

.l-grid--gutter-huge {
  @include to-rem(margin-left, -$l-grid-gutter-huge);

  > .l-grid__item {@include to-rem(padding-left, $l-grid-gutter-huge);}
}


/**
 * Modifier: reversed.
 *
 * Reversed rendered order of layout items, e.g. items 1, 2, 3, 4 in your
 * markup will display in order 4, 3, 2, 1 on your page.
 */

.l-grid--reversed > .l-grid__item {float: right;}


/**
 * Modifier: table display with options to set different vertical alignments.
 */

.l-grid--table {
  display: table;

  > .l-grid__item {
    display: table-cell;
    float: none;
  }
}

@if $l-grid-breakpoint-toggle-table {
  @include generate-at-breakpoints('.l-grid--table', $l-grid-breakpoints) {
    display: table;

    > .l-grid__item {
      display: table-cell;
      float: none;
    }
  }
}// end if

// Middle vertical alignment
.l-grid--table--v-align-middle > .l-grid__item {vertical-align: middle;}

@if $l-grid-breakpoint-toggle-table-v-align-middle {
  @include generate-at-breakpoints(
    '.l-grid--table--v-align-middle{bp} > .l-grid__item', $l-grid-breakpoints) {
    vertical-align: middle;}
}// end if

// Bottom vertical alignment
.l-grid--table--v-align-bottom > .l-grid__item {vertical-align: bottom;}

@if $l-grid-breakpoint-toggle-table-v-align-bottom {
  @include generate-at-breakpoints(
    '.l-grid--table--v-align-bottom{bp} > .l-grid__item', $l-grid-breakpoints) {
    vertical-align: bottom;}
}// end if